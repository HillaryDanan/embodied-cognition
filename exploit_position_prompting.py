"""
Can we exploit positional encoding for better prompting?
Test different prompt structures based on our findings
"""

from transformers import AutoModelForMaskedLM, AutoTokenizer
import torch

tokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')
model = AutoModelForMaskedLM.from_pretrained('bert-base-uncased')
model.eval()

def test_prompt_structure(prompt, mask_position):
    """Test how well model predicts based on position"""
    inputs = tokenizer(prompt, return_tensors='pt')
    with torch.no_grad():
        outputs = model(**inputs)
    
    mask_idx = (inputs['input_ids'] == tokenizer.mask_token_id).nonzero()[0,1]
    probs = torch.softmax(outputs.logits[0, mask_idx], dim=-1)
    
    # Get top 5 predictions
    top5 = torch.topk(probs, 5)
    predictions = [tokenizer.decode([idx]) for idx in top5.indices]
    return predictions, top5.values.tolist()

print("=" * 70)
print("EXPLOITING POSITIONAL ENCODING FOR BETTER PROMPTING")
print("=" * 70)

# Test physics reasoning with different prompt structures
physics_tests = {
    "OBJECT-FOCUSED (should fail)": [
        "The [MASK] fell upward",  # Asking about object
        "A [MASK] floated without support",
        "The [MASK] passed through the wall",
    ],
    
    "PREDICATE-FOCUSED (should work)": [
        "The ball [MASK] downward",  # Asking about action
        "The rock naturally [MASK]",
        "Water always [MASK] downhill",
    ],
    
    "FUNCTION-WORD PHYSICS (optimal?)": [
        "The ball rolled [MASK] the wall",  # through/around/over
        "The water flowed [MASK]",  # down/up
        "Objects fall [MASK] gravity",  # with/against
    ]
}

for prompt_type, prompts in physics_tests.items():
    print(f"\n{prompt_type}")
    print("-" * 50)
    
    for prompt in prompts:
        predictions, probs = test_prompt_structure(prompt, '[MASK]')
        print(f"\nPrompt: {prompt}")
        print(f"Top predictions: {', '.join(predictions[:3])}")
        print(f"Confidence: {probs[0]:.3f}")

print("\n" + "=" * 70)
print("IMPLICATIONS FOR PROMPT ENGINEERING:")
print("1. Ask for RELATIONS not OBJECTS")
print("2. Use function words to guide reasoning")
print("3. Structure prompts around verbs/prepositions")
